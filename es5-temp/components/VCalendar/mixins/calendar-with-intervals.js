// Mixins
import CalendarBase from './calendar-base';
// Util
import { validateNumber } from '../util/validate';
import { copyTimestamp, updateMinutes, createDayList, createIntervalList, createNativeLocaleFormatter } from '../util/timestamp';
/* @vue/component */
export default CalendarBase.extend({
    name: 'calendar-with-intervals',
    // depends on: maxDays
    props: {
        maxDays: {
            type: Number,
            default: 7
        },
        shortIntervals: {
            type: Boolean,
            default: true
        },
        intervalHeight: {
            type: [Number, String],
            default: 40,
            validate: validateNumber
        },
        intervalMinutes: {
            type: [Number, String],
            default: 60,
            validate: validateNumber
        },
        firstInterval: {
            type: [Number, String],
            default: 0,
            validate: validateNumber
        },
        intervalCount: {
            type: [Number, String],
            default: 24,
            validate: validateNumber
        },
        intervalFormat: {
            type: Function,
            default: null
        },
        intervalStyle: {
            type: Function,
            default: null
        },
        showIntervalLabel: {
            type: Function,
            default: null
        }
    },
    computed: {
        parsedFirstInterval() {
            return parseInt(this.firstInterval);
        },
        parsedIntervalMinutes() {
            return parseInt(this.intervalMinutes);
        },
        parsedIntervalCount() {
            return parseInt(this.intervalCount);
        },
        parsedIntervalHeight() {
            return parseFloat(this.intervalHeight);
        },
        firstMinute() {
            return this.parsedFirstInterval * this.parsedIntervalMinutes;
        },
        bodyHeight() {
            return this.parsedIntervalCount * this.parsedIntervalHeight;
        },
        days() {
            return createDayList(this.parsedStart, this.parsedEnd, this.times.today, this.weekdaySkips, this.maxDays);
        },
        intervals() {
            const days = this.days;
            const first = this.parsedFirstInterval;
            const minutes = this.parsedIntervalMinutes;
            const count = this.parsedIntervalCount;
            const now = this.times.now;
            return days.map(d => createIntervalList(d, first, minutes, count, now));
        },
        intervalFormatter() {
            if (this.intervalFormat) {
                return this.intervalFormat;
            }
            const longOptions = { timeZone: 'UTC', hour12: true, hour: '2-digit', minute: '2-digit' };
            const shortOptions = { timeZone: 'UTC', hour12: true, hour: 'numeric', minute: '2-digit' };
            const shortHourOptions = { timeZone: 'UTC', hour12: true, hour: 'numeric' };
            return createNativeLocaleFormatter(this.locale, (tms, short) => short ? (tms.minute === 0 ? shortHourOptions : shortOptions) : longOptions);
        }
    },
    methods: {
        showIntervalLabelDefault(interval) {
            const first = this.intervals[0][0];
            const isFirst = first.hour === interval.hour && first.minute === interval.minute;
            return !isFirst && interval.minute === 0;
        },
        intervalStyleDefault(interval) {
            return undefined;
        },
        getTimestampAtEvent(e, day) {
            const timestamp = copyTimestamp(day);
            const bounds = e.currentTarget.getBoundingClientRect();
            const baseMinutes = this.firstMinute;
            const touchEvent = e;
            const mouseEvent = e;
            const touches = touchEvent.changedTouches || touchEvent.touches;
            const clientY = touches && touches[0] ? touches[0].clientY : mouseEvent.clientY;
            const addIntervals = (clientY - bounds.top) / this.parsedIntervalHeight;
            const addMinutes = Math.floor(addIntervals * this.parsedIntervalMinutes);
            const minutes = baseMinutes + addMinutes;
            return updateMinutes(timestamp, minutes, this.times.now);
        }
    }
});
//# sourceMappingURL=data:application/json;base64,