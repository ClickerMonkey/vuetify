import Vue from 'vue';
import { validateTimestamp, parseTimestamp, updateFormatted } from '../util/timestamp';
export const times = {
    now: parseTimestamp('0000-00-00 00:00'),
    today: parseTimestamp('0000-00-00')
};
export default Vue.extend({
    name: 'times',
    props: {
        now: {
            type: String,
            validator: validateTimestamp
        }
    },
    data: () => ({
        times
    }),
    computed: {
        parsedNow() {
            return this.now ? parseTimestamp(this.now) : null;
        }
    },
    watch: {
        parsedNow: 'updateTimes'
    },
    created() {
        this.updateTimes();
        this.setPresent();
    },
    methods: {
        setPresent() {
            this.times.now.present = this.times.today.present = true;
            this.times.now.past = this.times.today.past = false;
            this.times.now.future = this.times.today.future = false;
        },
        updateTimes() {
            const now = this.parsedNow || this.getNow();
            this.updateDay(now, this.times.now);
            this.updateTime(now, this.times.now);
            this.updateDay(now, this.times.today);
        },
        getNow() {
            const now = new Date();
            return updateFormatted({
                date: '',
                time: '',
                year: now.getFullYear(),
                month: now.getMonth() + 1,
                day: now.getDate(),
                weekday: now.getDay(),
                hour: now.getHours(),
                minute: now.getMinutes(),
                hasDay: true,
                hasTime: true,
                past: false,
                present: true,
                future: false
            });
        },
        updateDay(now, target) {
            if (now.date !== target.date) {
                target.year = now.year;
                target.month = now.month;
                target.day = now.day;
                target.weekday = now.weekday;
                target.date = now.date;
            }
        },
        updateTime(now, target) {
            if (now.time !== target.time) {
                target.hour = now.hour;
                target.minute = now.minute;
                target.time = now.time;
            }
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WQ2FsZW5kYXIvbWl4aW5zL3RpbWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQTtBQUVyQixPQUFPLEVBRUwsaUJBQWlCLEVBQ2pCLGNBQWMsRUFDZCxlQUFlLEVBQ2hCLE1BQU0sbUJBQW1CLENBQUE7QUFPMUIsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFnQjtJQUNoQyxHQUFHLEVBQUUsY0FBYyxDQUFDLGtCQUFrQixDQUFlO0lBQ3JELEtBQUssRUFBRSxjQUFjLENBQUMsWUFBWSxDQUFlO0NBQ2xELENBQUE7QUFFRCxlQUFlLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDeEIsSUFBSSxFQUFFLE9BQU87SUFFYixLQUFLLEVBQUU7UUFDTCxHQUFHLEVBQUU7WUFDSCxJQUFJLEVBQUUsTUFBTTtZQUNaLFNBQVMsRUFBRSxpQkFBaUI7U0FDN0I7S0FDRjtJQUVELElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ1gsS0FBSztLQUNOLENBQUM7SUFFRixRQUFRLEVBQUU7UUFDUixTQUFTO1lBQ1AsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7UUFDbkQsQ0FBQztLQUNGO0lBRUQsS0FBSyxFQUFFO1FBQ0wsU0FBUyxFQUFFLGFBQWE7S0FDekI7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ2xCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNuQixDQUFDO0lBRUQsT0FBTyxFQUFFO1FBQ1AsVUFBVTtZQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBO1lBQ3hELElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFBO1lBQ25ELElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO1FBQ3pELENBQUM7UUFDRCxXQUFXO1lBQ1QsTUFBTSxHQUFHLEdBQWUsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7WUFDdkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNuQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDdkMsQ0FBQztRQUNELE1BQU07WUFDSixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFBO1lBRXRCLE9BQU8sZUFBZSxDQUFDO2dCQUNyQixJQUFJLEVBQUUsRUFBRTtnQkFDUixJQUFJLEVBQUUsRUFBRTtnQkFDUixJQUFJLEVBQUUsR0FBRyxDQUFDLFdBQVcsRUFBRTtnQkFDdkIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO2dCQUN6QixHQUFHLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRTtnQkFDbEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3JCLElBQUksRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFO2dCQUNwQixNQUFNLEVBQUUsR0FBRyxDQUFDLFVBQVUsRUFBRTtnQkFDeEIsTUFBTSxFQUFFLElBQUk7Z0JBQ1osT0FBTyxFQUFFLElBQUk7Z0JBQ2IsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsTUFBTSxFQUFFLEtBQUs7YUFDZCxDQUFDLENBQUE7UUFDSixDQUFDO1FBQ0QsU0FBUyxDQUFFLEdBQWUsRUFBRSxNQUFrQjtZQUM1QyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRTtnQkFDNUIsTUFBTSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFBO2dCQUN0QixNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUE7Z0JBQ3hCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQTtnQkFDcEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFBO2dCQUM1QixNQUFNLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUE7YUFDdkI7UUFDSCxDQUFDO1FBQ0QsVUFBVSxDQUFFLEdBQWUsRUFBRSxNQUFrQjtZQUM3QyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRTtnQkFDNUIsTUFBTSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFBO2dCQUN0QixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUE7Z0JBQzFCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQTthQUN2QjtRQUNILENBQUM7S0FDRjtDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xuXG5pbXBvcnQge1xuICBWVGltZXN0YW1wLFxuICB2YWxpZGF0ZVRpbWVzdGFtcCxcbiAgcGFyc2VUaW1lc3RhbXAsXG4gIHVwZGF0ZUZvcm1hdHRlZFxufSBmcm9tICcuLi91dGlsL3RpbWVzdGFtcCdcblxuZXhwb3J0IGludGVyZmFjZSBUaW1lc09iamVjdCB7XG4gIG5vdzogVlRpbWVzdGFtcFxuICB0b2RheTogVlRpbWVzdGFtcFxufVxuXG5leHBvcnQgY29uc3QgdGltZXM6IFRpbWVzT2JqZWN0ID0ge1xuICBub3c6IHBhcnNlVGltZXN0YW1wKCcwMDAwLTAwLTAwIDAwOjAwJykgYXMgVlRpbWVzdGFtcCxcbiAgdG9kYXk6IHBhcnNlVGltZXN0YW1wKCcwMDAwLTAwLTAwJykgYXMgVlRpbWVzdGFtcFxufVxuXG5leHBvcnQgZGVmYXVsdCBWdWUuZXh0ZW5kKHtcbiAgbmFtZTogJ3RpbWVzJyxcblxuICBwcm9wczoge1xuICAgIG5vdzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgdmFsaWRhdG9yOiB2YWxpZGF0ZVRpbWVzdGFtcFxuICAgIH1cbiAgfSxcblxuICBkYXRhOiAoKSA9PiAoe1xuICAgIHRpbWVzXG4gIH0pLFxuXG4gIGNvbXB1dGVkOiB7XG4gICAgcGFyc2VkTm93ICgpOiBWVGltZXN0YW1wIHwgbnVsbCB7XG4gICAgICByZXR1cm4gdGhpcy5ub3cgPyBwYXJzZVRpbWVzdGFtcCh0aGlzLm5vdykgOiBudWxsXG4gICAgfVxuICB9LFxuXG4gIHdhdGNoOiB7XG4gICAgcGFyc2VkTm93OiAndXBkYXRlVGltZXMnXG4gIH0sXG5cbiAgY3JlYXRlZCAoKSB7XG4gICAgdGhpcy51cGRhdGVUaW1lcygpXG4gICAgdGhpcy5zZXRQcmVzZW50KClcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgc2V0UHJlc2VudCAoKTogdm9pZCB7XG4gICAgICB0aGlzLnRpbWVzLm5vdy5wcmVzZW50ID0gdGhpcy50aW1lcy50b2RheS5wcmVzZW50ID0gdHJ1ZVxuICAgICAgdGhpcy50aW1lcy5ub3cucGFzdCA9IHRoaXMudGltZXMudG9kYXkucGFzdCA9IGZhbHNlXG4gICAgICB0aGlzLnRpbWVzLm5vdy5mdXR1cmUgPSB0aGlzLnRpbWVzLnRvZGF5LmZ1dHVyZSA9IGZhbHNlXG4gICAgfSxcbiAgICB1cGRhdGVUaW1lcyAoKTogdm9pZCB7XG4gICAgICBjb25zdCBub3c6IFZUaW1lc3RhbXAgPSB0aGlzLnBhcnNlZE5vdyB8fCB0aGlzLmdldE5vdygpXG4gICAgICB0aGlzLnVwZGF0ZURheShub3csIHRoaXMudGltZXMubm93KVxuICAgICAgdGhpcy51cGRhdGVUaW1lKG5vdywgdGhpcy50aW1lcy5ub3cpXG4gICAgICB0aGlzLnVwZGF0ZURheShub3csIHRoaXMudGltZXMudG9kYXkpXG4gICAgfSxcbiAgICBnZXROb3cgKCk6IFZUaW1lc3RhbXAge1xuICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKVxuXG4gICAgICByZXR1cm4gdXBkYXRlRm9ybWF0dGVkKHtcbiAgICAgICAgZGF0ZTogJycsXG4gICAgICAgIHRpbWU6ICcnLFxuICAgICAgICB5ZWFyOiBub3cuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgbW9udGg6IG5vdy5nZXRNb250aCgpICsgMSxcbiAgICAgICAgZGF5OiBub3cuZ2V0RGF0ZSgpLFxuICAgICAgICB3ZWVrZGF5OiBub3cuZ2V0RGF5KCksXG4gICAgICAgIGhvdXI6IG5vdy5nZXRIb3VycygpLFxuICAgICAgICBtaW51dGU6IG5vdy5nZXRNaW51dGVzKCksXG4gICAgICAgIGhhc0RheTogdHJ1ZSxcbiAgICAgICAgaGFzVGltZTogdHJ1ZSxcbiAgICAgICAgcGFzdDogZmFsc2UsXG4gICAgICAgIHByZXNlbnQ6IHRydWUsXG4gICAgICAgIGZ1dHVyZTogZmFsc2VcbiAgICAgIH0pXG4gICAgfSxcbiAgICB1cGRhdGVEYXkgKG5vdzogVlRpbWVzdGFtcCwgdGFyZ2V0OiBWVGltZXN0YW1wKTogdm9pZCB7XG4gICAgICBpZiAobm93LmRhdGUgIT09IHRhcmdldC5kYXRlKSB7XG4gICAgICAgIHRhcmdldC55ZWFyID0gbm93LnllYXJcbiAgICAgICAgdGFyZ2V0Lm1vbnRoID0gbm93Lm1vbnRoXG4gICAgICAgIHRhcmdldC5kYXkgPSBub3cuZGF5XG4gICAgICAgIHRhcmdldC53ZWVrZGF5ID0gbm93LndlZWtkYXlcbiAgICAgICAgdGFyZ2V0LmRhdGUgPSBub3cuZGF0ZVxuICAgICAgfVxuICAgIH0sXG4gICAgdXBkYXRlVGltZSAobm93OiBWVGltZXN0YW1wLCB0YXJnZXQ6IFZUaW1lc3RhbXApOiB2b2lkIHtcbiAgICAgIGlmIChub3cudGltZSAhPT0gdGFyZ2V0LnRpbWUpIHtcbiAgICAgICAgdGFyZ2V0LmhvdXIgPSBub3cuaG91clxuICAgICAgICB0YXJnZXQubWludXRlID0gbm93Lm1pbnV0ZVxuICAgICAgICB0YXJnZXQudGltZSA9IG5vdy50aW1lXG4gICAgICB9XG4gICAgfVxuICB9XG59KVxuIl19