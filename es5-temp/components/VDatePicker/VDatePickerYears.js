import '../../stylus/components/_date-picker-years.styl';
// Mixins
import Colorable from '../../mixins/colorable';
// Utils
import { createNativeLocaleFormatter } from './util';
/* @vue/component */
export default {
    name: 'v-date-picker-years',
    mixins: [Colorable],
    props: {
        format: {
            type: Function,
            default: null
        },
        locale: {
            type: String,
            default: 'en-us'
        },
        min: [Number, String],
        max: [Number, String],
        value: [Number, String]
    },
    data() {
        return {
            defaultColor: 'primary'
        };
    },
    computed: {
        formatter() {
            return this.format || createNativeLocaleFormatter(this.locale, { year: 'numeric', timeZone: 'UTC' }, { length: 4 });
        }
    },
    mounted() {
        const activeItem = this.$el.getElementsByClassName('active')[0];
        if (activeItem) {
            this.$el.scrollTop = activeItem.offsetTop - this.$el.offsetHeight / 2 + activeItem.offsetHeight / 2;
        }
        else {
            this.$el.scrollTop = this.$el.scrollHeight / 2 - this.$el.offsetHeight / 2;
        }
    },
    methods: {
        genYearItem(year) {
            const formatted = this.formatter(`${year}`);
            return this.$createElement('li', {
                key: year,
                'class': parseInt(this.value, 10) === year
                    ? this.addTextColorClassChecks({ active: true })
                    : {},
                on: {
                    click: () => this.$emit('input', year)
                }
            }, formatted);
        },
        genYearItems() {
            const children = [];
            const selectedYear = this.value ? parseInt(this.value, 10) : new Date().getFullYear();
            const maxYear = this.max ? parseInt(this.max, 10) : (selectedYear + 100);
            const minYear = Math.min(maxYear, this.min ? parseInt(this.min, 10) : (selectedYear - 100));
            for (let year = maxYear; year >= minYear; year--) {
                children.push(this.genYearItem(year));
            }
            return children;
        }
    },
    render() {
        return this.$createElement('ul', {
            staticClass: 'v-date-picker-years',
            ref: 'years'
        }, this.genYearItems());
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkRhdGVQaWNrZXJZZWFycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL1ZEYXRlUGlja2VyWWVhcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxpREFBaUQsQ0FBQTtBQUV4RCxTQUFTO0FBQ1QsT0FBTyxTQUFTLE1BQU0sd0JBQXdCLENBQUE7QUFFOUMsUUFBUTtBQUNSLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUVwRCxvQkFBb0I7QUFDcEIsZUFBZTtJQUNiLElBQUksRUFBRSxxQkFBcUI7SUFFM0IsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDO0lBRW5CLEtBQUssRUFBRTtRQUNMLE1BQU0sRUFBRTtZQUNOLElBQUksRUFBRSxRQUFRO1lBQ2QsT0FBTyxFQUFFLElBQUk7U0FDZDtRQUNELE1BQU0sRUFBRTtZQUNOLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLE9BQU87U0FDakI7UUFDRCxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1FBQ3JCLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7UUFDckIsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztLQUN4QjtJQUVELElBQUk7UUFDRixPQUFPO1lBQ0wsWUFBWSxFQUFFLFNBQVM7U0FDeEIsQ0FBQTtJQUNILENBQUM7SUFFRCxRQUFRLEVBQUU7UUFDUixTQUFTO1lBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLDJCQUEyQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3JILENBQUM7S0FDRjtJQUVELE9BQU87UUFDTCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQy9ELElBQUksVUFBVSxFQUFFO1lBQ2QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUcsVUFBVSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUE7U0FDcEc7YUFBTTtZQUNMLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUE7U0FDM0U7SUFDSCxDQUFDO0lBRUQsT0FBTyxFQUFFO1FBQ1AsV0FBVyxDQUFFLElBQUk7WUFDZixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQTtZQUUzQyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFO2dCQUMvQixHQUFHLEVBQUUsSUFBSTtnQkFDVCxPQUFPLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSTtvQkFDeEMsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztvQkFDaEQsQ0FBQyxDQUFDLEVBQUU7Z0JBQ04sRUFBRSxFQUFFO29CQUNGLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7aUJBQ3ZDO2FBQ0YsRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUNmLENBQUM7UUFDRCxZQUFZO1lBQ1YsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBO1lBQ25CLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFBO1lBQ3JGLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsQ0FBQTtZQUN4RSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUUzRixLQUFLLElBQUksSUFBSSxHQUFHLE9BQU8sRUFBRSxJQUFJLElBQUksT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUNoRCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTthQUN0QztZQUVELE9BQU8sUUFBUSxDQUFBO1FBQ2pCLENBQUM7S0FDRjtJQUVELE1BQU07UUFDSixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFO1lBQy9CLFdBQVcsRUFBRSxxQkFBcUI7WUFDbEMsR0FBRyxFQUFFLE9BQU87U0FDYixFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFBO0lBQ3pCLENBQUM7Q0FDRixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuLi8uLi9zdHlsdXMvY29tcG9uZW50cy9fZGF0ZS1waWNrZXIteWVhcnMuc3R5bCdcblxuLy8gTWl4aW5zXG5pbXBvcnQgQ29sb3JhYmxlIGZyb20gJy4uLy4uL21peGlucy9jb2xvcmFibGUnXG5cbi8vIFV0aWxzXG5pbXBvcnQgeyBjcmVhdGVOYXRpdmVMb2NhbGVGb3JtYXR0ZXIgfSBmcm9tICcuL3V0aWwnXG5cbi8qIEB2dWUvY29tcG9uZW50ICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICd2LWRhdGUtcGlja2VyLXllYXJzJyxcblxuICBtaXhpbnM6IFtDb2xvcmFibGVdLFxuXG4gIHByb3BzOiB7XG4gICAgZm9ybWF0OiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICB9LFxuICAgIGxvY2FsZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2VuLXVzJ1xuICAgIH0sXG4gICAgbWluOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIG1heDogW051bWJlciwgU3RyaW5nXSxcbiAgICB2YWx1ZTogW051bWJlciwgU3RyaW5nXVxuICB9LFxuXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkZWZhdWx0Q29sb3I6ICdwcmltYXJ5J1xuICAgIH1cbiAgfSxcblxuICBjb21wdXRlZDoge1xuICAgIGZvcm1hdHRlciAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXQgfHwgY3JlYXRlTmF0aXZlTG9jYWxlRm9ybWF0dGVyKHRoaXMubG9jYWxlLCB7IHllYXI6ICdudW1lcmljJywgdGltZVpvbmU6ICdVVEMnIH0sIHsgbGVuZ3RoOiA0IH0pXG4gICAgfVxuICB9LFxuXG4gIG1vdW50ZWQgKCkge1xuICAgIGNvbnN0IGFjdGl2ZUl0ZW0gPSB0aGlzLiRlbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhY3RpdmUnKVswXVxuICAgIGlmIChhY3RpdmVJdGVtKSB7XG4gICAgICB0aGlzLiRlbC5zY3JvbGxUb3AgPSBhY3RpdmVJdGVtLm9mZnNldFRvcCAtIHRoaXMuJGVsLm9mZnNldEhlaWdodCAvIDIgKyBhY3RpdmVJdGVtLm9mZnNldEhlaWdodCAvIDJcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWwuc2Nyb2xsVG9wID0gdGhpcy4kZWwuc2Nyb2xsSGVpZ2h0IC8gMiAtIHRoaXMuJGVsLm9mZnNldEhlaWdodCAvIDJcbiAgICB9XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGdlblllYXJJdGVtICh5ZWFyKSB7XG4gICAgICBjb25zdCBmb3JtYXR0ZWQgPSB0aGlzLmZvcm1hdHRlcihgJHt5ZWFyfWApXG5cbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCdsaScsIHtcbiAgICAgICAga2V5OiB5ZWFyLFxuICAgICAgICAnY2xhc3MnOiBwYXJzZUludCh0aGlzLnZhbHVlLCAxMCkgPT09IHllYXJcbiAgICAgICAgICA/IHRoaXMuYWRkVGV4dENvbG9yQ2xhc3NDaGVja3MoeyBhY3RpdmU6IHRydWUgfSlcbiAgICAgICAgICA6IHt9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIGNsaWNrOiAoKSA9PiB0aGlzLiRlbWl0KCdpbnB1dCcsIHllYXIpXG4gICAgICAgIH1cbiAgICAgIH0sIGZvcm1hdHRlZClcbiAgICB9LFxuICAgIGdlblllYXJJdGVtcyAoKSB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IFtdXG4gICAgICBjb25zdCBzZWxlY3RlZFllYXIgPSB0aGlzLnZhbHVlID8gcGFyc2VJbnQodGhpcy52YWx1ZSwgMTApIDogbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpXG4gICAgICBjb25zdCBtYXhZZWFyID0gdGhpcy5tYXggPyBwYXJzZUludCh0aGlzLm1heCwgMTApIDogKHNlbGVjdGVkWWVhciArIDEwMClcbiAgICAgIGNvbnN0IG1pblllYXIgPSBNYXRoLm1pbihtYXhZZWFyLCB0aGlzLm1pbiA/IHBhcnNlSW50KHRoaXMubWluLCAxMCkgOiAoc2VsZWN0ZWRZZWFyIC0gMTAwKSlcblxuICAgICAgZm9yIChsZXQgeWVhciA9IG1heFllYXI7IHllYXIgPj0gbWluWWVhcjsgeWVhci0tKSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5nZW5ZZWFySXRlbSh5ZWFyKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoaWxkcmVuXG4gICAgfVxuICB9LFxuXG4gIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3VsJywge1xuICAgICAgc3RhdGljQ2xhc3M6ICd2LWRhdGUtcGlja2VyLXllYXJzJyxcbiAgICAgIHJlZjogJ3llYXJzJ1xuICAgIH0sIHRoaXMuZ2VuWWVhckl0ZW1zKCkpXG4gIH1cbn1cbiJdfQ==