// Mixins
import Routable from '../../mixins/routable';
import { inject as RegistrableInject } from '../../mixins/registrable';
// Utilities
import { getObjectValueByPath } from '../../util/helpers';
/* @vue/component */
export default {
    name: 'v-tab',
    mixins: [
        RegistrableInject('tabs', 'v-tab', 'v-tabs'),
        Routable
    ],
    inject: ['tabClick'],
    props: {
        activeClass: {
            type: String,
            default: 'v-tabs__item--active'
        },
        ripple: {
            type: [Boolean, Object],
            default: true
        }
    },
    data() {
        return {
            isActive: false
        };
    },
    computed: {
        classes() {
            return {
                'v-tabs__item': true,
                'v-tabs__item--disabled': this.disabled,
                [this.activeClass]: !this.to && this.isActive
            };
        },
        action() {
            let to = this.to || this.href;
            if (this.$router &&
                this.to === Object(this.to)) {
                const resolve = this.$router.resolve(this.to, this.$route, this.append);
                to = resolve.href;
            }
            return typeof to === 'string'
                ? to.replace('#', '')
                : this;
        }
    },
    watch: {
        $route: 'onRouteChange'
    },
    mounted() {
        this.tabs.register(this);
        this.onRouteChange();
    },
    beforeDestroy() {
        this.tabs.unregister(this);
    },
    methods: {
        click(e) {
            // If user provides an
            // actual link, do not
            // prevent default
            if (this.href &&
                this.href.indexOf('#') > -1)
                e.preventDefault();
            this.$emit('click', e);
            this.to || this.tabClick(this);
        },
        onRouteChange() {
            if (!this.to || !this.$refs.link)
                return;
            const path = `_vnode.data.class.${this.activeClass}`;
            this.$nextTick(() => {
                if (getObjectValueByPath(this.$refs.link, path)) {
                    this.tabClick(this);
                }
            });
        },
        toggle(action) {
            this.isActive = (action === this) || (action === this.action);
        }
    },
    render(h) {
        const link = this.generateRouteLink();
        const { data } = link;
        // If disabled, use div as anchor tags do not support
        // being disabled
        const tag = this.disabled ? 'div' : link.tag;
        data.ref = 'link';
        return h('div', {
            staticClass: 'v-tabs__div'
        }, [h(tag, data, this.$slots.default)]);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlRhYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZUYWJzL1ZUYWIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUztBQUNULE9BQU8sUUFBUSxNQUFNLHVCQUF1QixDQUFBO0FBQzVDLE9BQU8sRUFDTCxNQUFNLElBQUksaUJBQWlCLEVBQzVCLE1BQU0sMEJBQTBCLENBQUE7QUFFakMsWUFBWTtBQUNaLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRXpELG9CQUFvQjtBQUNwQixlQUFlO0lBQ2IsSUFBSSxFQUFFLE9BQU87SUFFYixNQUFNLEVBQUU7UUFDTixpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQztRQUM1QyxRQUFRO0tBQ1Q7SUFFRCxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUM7SUFFcEIsS0FBSyxFQUFFO1FBQ0wsV0FBVyxFQUFFO1lBQ1gsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsc0JBQXNCO1NBQ2hDO1FBQ0QsTUFBTSxFQUFFO1lBQ04sSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQztZQUN2QixPQUFPLEVBQUUsSUFBSTtTQUNkO0tBQ0Y7SUFFRCxJQUFJO1FBQ0YsT0FBTztZQUNMLFFBQVEsRUFBRSxLQUFLO1NBQ2hCLENBQUE7SUFDSCxDQUFDO0lBRUQsUUFBUSxFQUFFO1FBQ1IsT0FBTztZQUNMLE9BQU87Z0JBQ0wsY0FBYyxFQUFFLElBQUk7Z0JBQ3BCLHdCQUF3QixFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUN2QyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVE7YUFDOUMsQ0FBQTtRQUNILENBQUM7UUFDRCxNQUFNO1lBQ0osSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMs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ZXNDb250ZW50IjpbIi8vIE1peGluc1xuaW1wb3J0IFJvdXRhYmxlIGZyb20gJy4uLy4uL21peGlucy9yb3V0YWJsZSdcbmltcG9ydCB7XG4gIGluamVjdCBhcyBSZWdpc3RyYWJsZUluamVjdFxufSBmcm9tICcuLi8uLi9taXhpbnMvcmVnaXN0cmFibGUnXG5cbi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2V0T2JqZWN0VmFsdWVCeVBhdGggfSBmcm9tICcuLi8uLi91dGlsL2hlbHBlcnMnXG5cbi8qIEB2dWUvY29tcG9uZW50ICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICd2LXRhYicsXG5cbiAgbWl4aW5zOiBbXG4gICAgUmVnaXN0cmFibGVJbmplY3QoJ3RhYnMnLCAndi10YWInLCAndi10YWJzJyksXG4gICAgUm91dGFibGVcbiAgXSxcblxuICBpbmplY3Q6IFsndGFiQ2xpY2snXSxcblxuICBwcm9wczoge1xuICAgIGFjdGl2ZUNsYXNzOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAndi10YWJzX19pdGVtLS1hY3RpdmUnXG4gICAgfSxcbiAgICByaXBwbGU6IHtcbiAgICAgIHR5cGU6IFtCb29sZWFuLCBPYmplY3RdLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH1cbiAgfSxcblxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNBY3RpdmU6IGZhbHNlXG4gICAgfVxuICB9LFxuXG4gIGNvbXB1dGVkOiB7XG4gICAgY2xhc3NlcyAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAndi10YWJzX19pdGVtJzogdHJ1ZSxcbiAgICAgICAgJ3YtdGFic19faXRlbS0tZGlzYWJsZWQnOiB0aGlzLmRpc2FibGVkLFxuICAgICAgICBbdGhpcy5hY3RpdmVDbGFzc106ICF0aGlzLnRvICYmIHRoaXMuaXNBY3RpdmVcbiAgICAgIH1cbiAgICB9LFxuICAgIGFjdGlvbiAoKSB7XG4gICAgICBsZXQgdG8gPSB0aGlzLnRvIHx8IHRoaXMuaHJlZlxuXG4gICAgICBpZiAodGhpcy4kcm91dGVyICYmXG4gICAgICAgIHRoaXMudG8gPT09IE9iamVjdCh0aGlzLnRvKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHJlc29sdmUgPSB0aGlzLiRyb3V0ZXIucmVzb2x2ZShcbiAgICAgICAgICB0aGlzLnRvLFxuICAgICAgICAgIHRoaXMuJHJvdXRlLFxuICAgICAgICAgIHRoaXMuYXBwZW5kXG4gICAgICAgIClcblxuICAgICAgICB0byA9IHJlc29sdmUuaHJlZlxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHlwZW9mIHRvID09PSAnc3RyaW5nJ1xuICAgICAgICA/IHRvLnJlcGxhY2UoJyMnLCAnJylcbiAgICAgICAgOiB0aGlzXG4gICAgfVxuICB9LFxuXG4gIHdhdGNoOiB7XG4gICAgJHJvdXRlOiAnb25Sb3V0ZUNoYW5nZSdcbiAgfSxcblxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLnRhYnMucmVnaXN0ZXIodGhpcylcbiAgICB0aGlzLm9uUm91dGVDaGFuZ2UoKVxuICB9LFxuXG4gIGJlZm9yZURlc3Ryb3kgKCkge1xuICAgIHRoaXMudGFicy51bnJlZ2lzdGVyKHRoaXMpXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGNsaWNrIChlKSB7XG4gICAgICAvLyBJZiB1c2VyIHByb3ZpZGVzIGFuXG4gICAgICAvLyBhY3R1YWwgbGluaywgZG8gbm90XG4gICAgICAvLyBwcmV2ZW50IGRlZmF1bHRcbiAgICAgIGlmICh0aGlzLmhyZWYgJiZcbiAgICAgICAgdGhpcy5ocmVmLmluZGV4T2YoJyMnKSA+IC0xXG4gICAgICApIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgICB0aGlzLiRlbWl0KCdjbGljaycsIGUpXG5cbiAgICAgIHRoaXMudG8gfHwgdGhpcy50YWJDbGljayh0aGlzKVxuICAgIH0sXG4gICAgb25Sb3V0ZUNoYW5nZSAoKSB7XG4gICAgICBpZiAoIXRoaXMudG8gfHwgIXRoaXMuJHJlZnMubGluaykgcmV0dXJuXG5cbiAgICAgIGNvbnN0IHBhdGggPSBgX3Zub2RlLmRhdGEuY2xhc3MuJHt0aGlzLmFjdGl2ZUNsYXNzfWBcblxuICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBpZiAoZ2V0T2JqZWN0VmFsdWVCeVBhdGgodGhpcy4kcmVmcy5saW5rLCBwYXRoKSkge1xuICAgICAgICAgIHRoaXMudGFiQ2xpY2sodGhpcylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIHRvZ2dsZSAoYWN0aW9uKSB7XG4gICAgICB0aGlzLmlzQWN0aXZlID0gKGFjdGlvbiA9PT0gdGhpcykgfHwgKGFjdGlvbiA9PT0gdGhpcy5hY3Rpb24pXG4gICAgfVxuICB9LFxuXG4gIHJlbmRlciAoaCkge1xuICAgIGNvbnN0IGxpbmsgPSB0aGlzLmdlbmVyYXRlUm91dGVMaW5rKClcbiAgICBjb25zdCB7IGRhdGEgfSA9IGxpbmtcblxuICAgIC8vIElmIGRpc2FibGVkLCB1c2UgZGl2IGFzIGFuY2hvciB0YWdzIGRvIG5vdCBzdXBwb3J0XG4gICAgLy8gYmVpbmcgZGlzYWJsZWRcbiAgICBjb25zdCB0YWcgPSB0aGlzLmRpc2FibGVkID8gJ2RpdicgOiBsaW5rLnRhZ1xuXG4gICAgZGF0YS5yZWYgPSAnbGluaydcblxuICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICBzdGF0aWNDbGFzczogJ3YtdGFic19fZGl2J1xuICAgIH0sIFtoKHRhZywgZGF0YSwgdGhpcy4kc2xvdHMuZGVmYXVsdCldKVxuICB9XG59XG4iXX0=