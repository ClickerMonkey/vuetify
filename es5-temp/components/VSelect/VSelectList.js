import '../../stylus/components/_cards.styl';
// Components
import VCheckbox from '../VCheckbox';
import VDivider from '../VDivider';
import VSubheader from '../VSubheader';
import { VList, VListTile, VListTileAction, VListTileContent, VListTileTitle } from '../VList';
// Mixins
import Colorable from '../../mixins/colorable';
import Themeable from '../../mixins/themeable';
// Helpers
import { escapeHTML, getPropertyFromItem } from '../../util/helpers';
/* @vue/component */
export default {
    name: 'v-select-list',
    mixins: [
        Colorable,
        Themeable
    ],
    props: {
        action: Boolean,
        dense: Boolean,
        hideSelected: Boolean,
        items: {
            type: Array,
            default: () => []
        },
        itemAvatar: {
            type: [String, Array, Function],
            default: 'avatar'
        },
        itemDisabled: {
            type: [String, Array, Function],
            default: 'disabled'
        },
        itemText: {
            type: [String, Array, Function],
            default: 'text'
        },
        itemValue: {
            type: [String, Array, Function],
            default: 'value'
        },
        noDataText: String,
        noFilter: Boolean,
        searchInput: {
            default: null
        },
        selectedItems: {
            type: Array,
            default: () => []
        }
    },
    computed: {
        parsedItems() {
            return this.selectedItems.map(item => this.getValue(item));
        },
        tileActiveClass() {
            return Object.keys(this.addTextColorClassChecks()).join(' ');
        },
        staticNoDataTile() {
            const tile = {
                on: {
                    mousedown: e => e.preventDefault() // Prevent onBlur from being called
                }
            };
            return this.$createElement(VListTile, tile, [
                this.genTileContent(this.noDataText)
            ]);
        }
    },
    methods: {
        genAction(item, inputValue) {
            const data = {
                on: {
                    click: e => {
                        e.stopPropagation();
                        this.$emit('select', item);
                    }
                }
            };
            return this.$createElement(VListTileAction, data, [
                this.$createElement(VCheckbox, {
                    props: {
                        color: this.computedColor,
                        inputValue
                    }
                })
            ]);
        },
        genDivider(props) {
            return this.$createElement(VDivider, { props });
        },
        genFilteredText(text) {
            text = (text || '').toString();
            if (!this.searchInput || this.noFilter)
                return escapeHTML(text);
            const { start, middle, end } = this.getMaskedCharacters(text);
            return `${escapeHTML(start)}${this.genHighlight(middle)}${escapeHTML(end)}`;
        },
        genHeader(props) {
            return this.$createElement(VSubheader, { props }, props.header);
        },
        genHighlight(text) {
            return `<span class="v-list__tile__mask">${escapeHTML(text)}</span>`;
        },
        getMaskedCharacters(text) {
            const searchInput = (this.searchInput || '').toString().toLowerCase();
            const index = text.toLowerCase().indexOf(searchInput);
            if (index < 0)
                return { start: '', middle: text, end: '' };
            const start = text.slice(0, index);
            const middle = text.slice(index, index + searchInput.length);
            const end = text.slice(index + searchInput.length);
            return { start, middle, end };
        },
        genTile(item, disabled = null, avatar = false, value = this.hasItem(item)) {
            if (item === Object(item)) {
                avatar = this.getAvatar(item);
                disabled = disabled !== null
                    ? disabled
                    : this.getDisabled(item);
            }
            const tile = {
                on: {
                    mousedown: e => {
                        // Prevent onBlur from being called
                        e.preventDefault();
                    },
                    click: () => disabled || this.$emit('select', item)
                },
                props: {
                    activeClass: this.tileActiveClass,
                    avatar,
                    disabled,
                    ripple: true,
                    value
                }
            };
            if (!this.$scopedSlots.item) {
                return this.$createElement(VListTile, tile, [
                    this.action && !this.hideSelected && this.items.length > 0
                        ? this.genAction(item, value)
                        : null,
                    this.genTileContent(item)
                ]);
            }
            const parent = this;
            const scopedSlot = this.$scopedSlots.item({ parent, item, tile });
            return this.needsTile(scopedSlot)
                ? this.$createElement(VListTile, tile, [scopedSlot])
                : scopedSlot;
        },
        genTileContent(item) {
            const innerHTML = this.genFilteredText(this.getText(item));
            return this.$createElement(VListTileContent, [this.$createElement(VListTileTitle, {
                    domProps: { innerHTML }
                })]);
        },
        hasItem(item) {
            return this.parsedItems.indexOf(this.getValue(item)) > -1;
        },
        needsTile(tile) {
            return tile.componentOptions == null ||
                tile.componentOptions.Ctor.options.name !== 'v-list-tile';
        },
        getAvatar(item) {
            return Boolean(getPropertyFromItem(item, this.itemAvatar, false));
        },
        getDisabled(item) {
            return Boolean(getPropertyFromItem(item, this.itemDisabled, false));
        },
        getText(item) {
            return String(getPropertyFromItem(item, this.itemText, item));
        },
        getValue(item) {
            return getPropertyFromItem(item, this.itemValue, this.getText(item));
        }
    },
    render() {
        const children = [];
        for (const item of this.items) {
            if (this.hideSelected &&
                this.hasItem(item))
                continue;
            if (item == null)
                children.push(this.genTile(item));
            else if (item.header)
                children.push(this.genHeader(item));
            else if (item.divider)
                children.push(this.genDivider(item));
            else
                children.push(this.genTile(item));
        }
        children.length || children.push(this.$slots['no-data'] || this.staticNoDataTile);
        this.$slots['prepend-item'] && children.unshift(this.$slots['prepend-item']);
        this.$slots['append-item'] && children.push(this.$slots['append-item']);
        return this.$createElement('div', {
            staticClass: 'v-select-list v-card',
            'class': this.themeClasses
        }, [
            this.$createElement(VList, {
                props: {
                    dense: this.dense
                }
            }, children)
        ]);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlNlbGVjdExpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WU2VsZWN0L1ZTZWxlY3RMaXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8scUNBQXFDLENBQUE7QUFFNUMsYUFBYTtBQUNiLE9BQU8sU0FBUyxNQUFNLGNBQWMsQ0FBQTtBQUNwQyxPQUFPLFFBQVEsTUFBTSxhQUFhLENBQUE7QUFDbEMsT0FBTyxVQUFVLE1BQU0sZUFBZSxDQUFBO0FBQ3RDLE9BQU8sRUFDTCxLQUFLLEVBQ0wsU0FBUyxFQUNULGVBQWUsRUFDZixnQkFBZ0IsRUFDaEIsY0FBYyxFQUNmLE1BQU0sVUFBVSxDQUFBO0FBRWpCLFNBQVM7QUFDVCxPQUFPLFNBQVMsTUFBTSx3QkFBd0IsQ0FBQTtBQUM5QyxPQUFPLFNBQVMsTUFBTSx3QkFBd0IsQ0FBQTtBQUU5QyxVQUFVO0FBQ1YsT0FBTyxFQUNMLFVBQVUsRUFDVixtQkFBbUIsRUFDcEIsTUFBTSxvQkFBb0IsQ0FBQTtBQUUzQixvQkFBb0I7QUFDcEIsZUFBZTtJQUNiLElBQUksRUFBRSxlQUFlO0lBRXJCLE1BQU0sRUFBRTtRQUNOLFNBQVM7UUFDVCxTQUFTO0tBQ1Y7SUFFRCxLQUFLLEVBQUU7UUFDTCxNQUFNLEVBQUUsT0FBTztRQUNmLEtBQUssRUFBRSxPQUFPO1FBQ2QsWUFBWSxFQUFFLE9BQU87UUFDckIsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtTQUNsQjtRQUNELFVBQVUsRUFBRTtZQUNWLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDO1lBQy9CLE9BQU8sRUFBRSxRQUFRO1NBQ2xCO1FBQ0QsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUM7WUFDL0IsT0FBTyxFQUFFLFVB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SUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQTtRQUU1RSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFBO1FBRXZFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUU7WUFDaEMsV0FBVyxFQUFFLHNCQUFzQjtZQUNuQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFlBQVk7U0FDM0IsRUFBRTtZQUNELElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFO2dCQUN6QixLQUFLLEVBQUU7b0JBQ0wsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO2lCQUNsQjthQUNGLEVBQUUsUUFBUSxDQUFDO1NBQ2IsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4uLy4uL3N0eWx1cy9jb21wb25lbnRzL19jYXJkcy5zdHlsJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgVkNoZWNrYm94IGZyb20gJy4uL1ZDaGVja2JveCdcbmltcG9ydCBWRGl2aWRlciBmcm9tICcuLi9WRGl2aWRlcidcbmltcG9ydCBWU3ViaGVhZGVyIGZyb20gJy4uL1ZTdWJoZWFkZXInXG5pbXBvcnQge1xuICBWTGlzdCxcbiAgVkxpc3RUaWxlLFxuICBWTGlzdFRpbGVBY3Rpb24sXG4gIFZMaXN0VGlsZUNvbnRlbnQsXG4gIFZMaXN0VGlsZVRpdGxlXG59IGZyb20gJy4uL1ZMaXN0J1xuXG4vLyBNaXhpbnNcbmltcG9ydCBDb2xvcmFibGUgZnJvbSAnLi4vLi4vbWl4aW5zL2NvbG9yYWJsZSdcbmltcG9ydCBUaGVtZWFibGUgZnJvbSAnLi4vLi4vbWl4aW5zL3RoZW1lYWJsZSdcblxuLy8gSGVscGVyc1xuaW1wb3J0IHtcbiAgZXNjYXBlSFRNTCxcbiAgZ2V0UHJvcGVydHlGcm9tSXRlbVxufSBmcm9tICcuLi8uLi91dGlsL2hlbHBlcnMnXG5cbi8qIEB2dWUvY29tcG9uZW50ICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICd2LXNlbGVjdC1saXN0JyxcblxuICBtaXhpbnM6IFtcbiAgICBDb2xvcmFibGUsXG4gICAgVGhlbWVhYmxlXG4gIF0sXG5cbiAgcHJvcHM6IHtcbiAgICBhY3Rpb246IEJvb2xlYW4sXG4gICAgZGVuc2U6IEJvb2xlYW4sXG4gICAgaGlkZVNlbGVjdGVkOiBCb29sZWFuLFxuICAgIGl0ZW1zOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gICAgfSxcbiAgICBpdGVtQXZhdGFyOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBBcnJheSwgRnVuY3Rpb25dLFxuICAgICAgZGVmYXVsdDogJ2F2YXRhcidcbiAgICB9LFxuICAgIGl0ZW1EaXNhYmxlZDoge1xuICAgICAgdHlwZTogW1N0cmluZywgQXJyYXksIEZ1bmN0aW9uXSxcbiAgICAgIGRlZmF1bHQ6ICdkaXNhYmxlZCdcbiAgICB9LFxuICAgIGl0ZW1UZXh0OiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBBcnJheSwgRnVuY3Rpb25dLFxuICAgICAgZGVmYXVsdDogJ3RleHQnXG4gICAgfSxcbiAgICBpdGVtVmFsdWU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIEFycmF5LCBGdW5jdGlvbl0sXG4gICAgICBkZWZhdWx0OiAndmFsdWUnXG4gICAgfSxcbiAgICBub0RhdGFUZXh0OiBTdHJpbmcsXG4gICAgbm9GaWx0ZXI6IEJvb2xlYW4sXG4gICAgc2VhcmNoSW5wdXQ6IHtcbiAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICB9LFxuICAgIHNlbGVjdGVkSXRlbXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogKCkgPT4gW11cbiAgICB9XG4gIH0sXG5cbiAgY29tcHV0ZWQ6IHtcbiAgICBwYXJzZWRJdGVtcyAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZEl0ZW1zLm1hcChpdGVtID0+IHRoaXMuZ2V0VmFsdWUoaXRlbSkpXG4gICAgfSxcbiAgICB0aWxlQWN0aXZlQ2xhc3MgKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuYWRkVGV4dENvbG9yQ2xhc3NDaGVja3MoKSkuam9pbignICcpXG4gICAgfSxcbiAgICBzdGF0aWNOb0RhdGFUaWxlICgpIHtcbiAgICAgIGNvbnN0IHRpbGUgPSB7XG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgbW91c2Vkb3duOiBlID0+IGUucHJldmVudERlZmF1bHQoKSAvLyBQcmV2ZW50IG9uQmx1ciBmcm9tIGJlaW5nIGNhbGxlZFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KFZMaXN0VGlsZSwgdGlsZSwgW1xuICAgICAgICB0aGlzLmdlblRpbGVDb250ZW50KHRoaXMubm9EYXRhVGV4dClcbiAgICAgIF0pXG4gICAgfVxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBnZW5BY3Rpb24gKGl0ZW0sIGlucHV0VmFsdWUpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgY2xpY2s6IGUgPT4ge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgICAgdGhpcy4kZW1pdCgnc2VsZWN0JywgaXRlbSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoVkxpc3RUaWxlQWN0aW9uLCBkYXRhLCBbXG4gICAgICAgIHRoaXMuJGNyZWF0ZUVsZW1lbnQoVkNoZWNrYm94LCB7XG4gICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbXB1dGVkQ29sb3IsXG4gICAgICAgICAgICBpbnB1dFZhbHVlXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXSlcbiAgICB9LFxuICAgIGdlbkRpdmlkZXIgKHByb3BzKSB7XG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudChWRGl2aWRlciwgeyBwcm9wcyB9KVxuICAgIH0sXG4gICAgZ2VuRmlsdGVyZWRUZXh0ICh0ZXh0KSB7XG4gICAgICB0ZXh0ID0gKHRleHQgfHwgJycpLnRvU3RyaW5nKClcblxuICAgICAgaWYgKCF0aGlzLnNlYXJjaElucHV0IHx8IHRoaXMubm9GaWx0ZXIpIHJldHVybiBlc2NhcGVIVE1MKHRleHQpXG5cbiAgICAgIGNvbnN0IHsgc3RhcnQsIG1pZGRsZSwgZW5kIH0gPSB0aGlzLmdldE1hc2tlZENoYXJhY3RlcnModGV4dClcblxuICAgICAgcmV0dXJuIGAke2VzY2FwZUhUTUwoc3RhcnQpfSR7dGhpcy5nZW5IaWdobGlnaHQobWlkZGxlKX0ke2VzY2FwZUhUTUwoZW5kKX1gXG4gICAgfSxcbiAgICBnZW5IZWFkZXIgKHByb3BzKSB7XG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudChWU3ViaGVhZGVyLCB7IHByb3BzIH0sIHByb3BzLmhlYWRlcilcbiAgICB9LFxuICAgIGdlbkhpZ2hsaWdodCAodGV4dCkge1xuICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cInYtbGlzdF9fdGlsZV9fbWFza1wiPiR7ZXNjYXBlSFRNTCh0ZXh0KX08L3NwYW4+YFxuICAgIH0sXG4gICAgZ2V0TWFza2VkQ2hhcmFjdGVycyAodGV4dCkge1xuICAgICAgY29uc3Qgc2VhcmNoSW5wdXQgPSAodGhpcy5zZWFyY2hJbnB1dCB8fCAnJykudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpXG4gICAgICBjb25zdCBpbmRleCA9IHRleHQudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaElucHV0KVxuXG4gICAgICBpZiAoaW5kZXggPCAwKSByZXR1cm4geyBzdGFydDogJycsIG1pZGRsZTogdGV4dCwgZW5kOiAnJyB9XG5cbiAgICAgIGNvbnN0IHN0YXJ0ID0gdGV4dC5zbGljZSgwLCBpbmRleClcbiAgICAgIGNvbnN0IG1pZGRsZSA9IHRleHQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoSW5wdXQubGVuZ3RoKVxuICAgICAgY29uc3QgZW5kID0gdGV4dC5zbGljZShpbmRleCArIHNlYXJjaElucHV0Lmxlbmd0aClcbiAgICAgIHJldHVybiB7IHN0YXJ0LCBtaWRkbGUsIGVuZCB9XG4gICAgfSxcbiAgICBnZW5UaWxlIChcbiAgICAgIGl0ZW0sXG4gICAgICBkaXNhYmxlZCA9IG51bGwsXG4gICAgICBhdmF0YXIgPSBmYWxzZSxcbiAgICAgIHZhbHVlID0gdGhpcy5oYXNJdGVtKGl0ZW0pXG4gICAgKSB7XG4gICAgICBpZiAoaXRlbSA9PT0gT2JqZWN0KGl0ZW0pKSB7XG4gICAgICAgIGF2YXRhciA9IHRoaXMuZ2V0QXZhdGFyKGl0ZW0pXG4gICAgICAgIGRpc2FibGVkID0gZGlzYWJsZWQgIT09IG51bGxcbiAgICAgICAgICA/IGRpc2FibGVkXG4gICAgICAgICAgOiB0aGlzLmdldERpc2FibGVkKGl0ZW0pXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRpbGUgPSB7XG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgbW91c2Vkb3duOiBlID0+IHtcbiAgICAgICAgICAgIC8vIFByZXZlbnQgb25CbHVyIGZyb20gYmVpbmcgY2FsbGVkXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNsaWNrOiAoKSA9PiBkaXNhYmxlZCB8fCB0aGlzLiRlbWl0KCdzZWxlY3QnLCBpdGVtKVxuICAgICAgICB9LFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIGFjdGl2ZUNsYXNzOiB0aGlzLnRpbGVBY3RpdmVDbGFzcyxcbiAgICAgICAgICBhdmF0YXIsXG4gICAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgICAgcmlwcGxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLiRzY29wZWRTbG90cy5pdGVtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KFZMaXN0VGlsZSwgdGlsZSwgW1xuICAgICAgICAgIHRoaXMuYWN0aW9uICYmICF0aGlzLmhpZGVTZWxlY3RlZCAmJiB0aGlzLml0ZW1zLmxlbmd0aCA+IDBcbiAgICAgICAgICAgID8gdGhpcy5nZW5BY3Rpb24oaXRlbSwgdmFsdWUpXG4gICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgdGhpcy5nZW5UaWxlQ29udGVudChpdGVtKVxuICAgICAgICBdKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBwYXJlbnQgPSB0aGlzXG4gICAgICBjb25zdCBzY29wZWRTbG90ID0gdGhpcy4kc2NvcGVkU2xvdHMuaXRlbSh7IHBhcmVudCwgaXRlbSwgdGlsZSB9KVxuXG4gICAgICByZXR1cm4gdGhpcy5uZWVkc1RpbGUoc2NvcGVkU2xvdClcbiAgICAgICAgPyB0aGlzLiRjcmVhdGVFbGVtZW50KFZMaXN0VGlsZSwgdGlsZSwgW3Njb3BlZFNsb3RdKVxuICAgICAgICA6IHNjb3BlZFNsb3RcbiAgICB9LFxuICAgIGdlblRpbGVDb250ZW50IChpdGVtKSB7XG4gICAgICBjb25zdCBpbm5lckhUTUwgPSB0aGlzLmdlbkZpbHRlcmVkVGV4dCh0aGlzLmdldFRleHQoaXRlbSkpXG5cbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KFZMaXN0VGlsZUNvbnRlbnQsXG4gICAgICAgIFt0aGlzLiRjcmVhdGVFbGVtZW50KFZMaXN0VGlsZVRpdGxlLCB7XG4gICAgICAgICAgZG9tUHJvcHM6IHsgaW5uZXJIVE1MIH1cbiAgICAgICAgfSldXG4gICAgICApXG4gICAgfSxcbiAgICBoYXNJdGVtIChpdGVtKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZWRJdGVtcy5pbmRleE9mKHRoaXMuZ2V0VmFsdWUoaXRlbSkpID4gLTFcbiAgICB9LFxuICAgIG5lZWRzVGlsZSAodGlsZSkge1xuICAgICAgcmV0dXJuIHRpbGUuY29tcG9uZW50T3B0aW9ucyA9PSBudWxsIHx8XG4gICAgICAgIHRpbGUuY29tcG9uZW50T3B0aW9ucy5DdG9yLm9wdGlvbnMubmFtZSAhPT0gJ3YtbGlzdC10aWxlJ1xuICAgIH0sXG4gICAgZ2V0QXZhdGFyIChpdGVtKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbihnZXRQcm9wZXJ0eUZyb21JdGVtKGl0ZW0sIHRoaXMuaXRlbUF2YXRhciwgZmFsc2UpKVxuICAgIH0sXG4gICAgZ2V0RGlzYWJsZWQgKGl0ZW0pIHtcbiAgICAgIHJldHVybiBCb29sZWFuKGdldFByb3BlcnR5RnJvbUl0ZW0oaXRlbSwgdGhpcy5pdGVtRGlzYWJsZWQsIGZhbHNlKSlcbiAgICB9LFxuICAgIGdldFRleHQgKGl0ZW0pIHtcbiAgICAgIHJldHVybiBTdHJpbmcoZ2V0UHJvcGVydHlGcm9tSXRlbShpdGVtLCB0aGlzLml0ZW1UZXh0LCBpdGVtKSlcbiAgICB9LFxuICAgIGdldFZhbHVlIChpdGVtKSB7XG4gICAgICByZXR1cm4gZ2V0UHJvcGVydHlGcm9tSXRlbShpdGVtLCB0aGlzLml0ZW1WYWx1ZSwgdGhpcy5nZXRUZXh0KGl0ZW0pKVxuICAgIH1cbiAgfSxcblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gW11cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcykge1xuICAgICAgaWYgKHRoaXMuaGlkZVNlbGVjdGVkICYmXG4gICAgICAgIHRoaXMuaGFzSXRlbShpdGVtKVxuICAgICAgKSBjb250aW51ZVxuXG4gICAgICBpZiAoaXRlbSA9PSBudWxsKSBjaGlsZHJlbi5wdXNoKHRoaXMuZ2VuVGlsZShpdGVtKSlcbiAgICAgIGVsc2UgaWYgKGl0ZW0uaGVhZGVyKSBjaGlsZHJlbi5wdXNoKHRoaXMuZ2VuSGVhZGVyKGl0ZW0pKVxuICAgICAgZWxzZSBpZiAoaXRlbS5kaXZpZGVyKSBjaGlsZHJlbi5wdXNoKHRoaXMuZ2VuRGl2aWRlcihpdGVtKSlcbiAgICAgIGVsc2UgY2hpbGRyZW4ucHVzaCh0aGlzLmdlblRpbGUoaXRlbSkpXG4gICAgfVxuXG4gICAgY2hpbGRyZW4ubGVuZ3RoIHx8IGNoaWxkcmVuLnB1c2godGhpcy4kc2xvdHNbJ25vLWRhdGEnXSB8fCB0aGlzLnN0YXRpY05vRGF0YVRpbGUpXG5cbiAgICB0aGlzLiRzbG90c1sncHJlcGVuZC1pdGVtJ10gJiYgY2hpbGRyZW4udW5zaGlmdCh0aGlzLiRzbG90c1sncHJlcGVuZC1pdGVtJ10pXG5cbiAgICB0aGlzLiRzbG90c1snYXBwZW5kLWl0ZW0nXSAmJiBjaGlsZHJlbi5wdXNoKHRoaXMuJHNsb3RzWydhcHBlbmQtaXRlbSddKVxuXG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIHN0YXRpY0NsYXNzOiAndi1zZWxlY3QtbGlzdCB2LWNhcmQnLFxuICAgICAgJ2NsYXNzJzogdGhpcy50aGVtZUNsYXNzZXNcbiAgICB9LCBbXG4gICAgICB0aGlzLiRjcmVhdGVFbGVtZW50KFZMaXN0LCB7XG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgZGVuc2U6IHRoaXMuZGVuc2VcbiAgICAgICAgfVxuICAgICAgfSwgY2hpbGRyZW4pXG4gICAgXSlcbiAgfVxufVxuIl19